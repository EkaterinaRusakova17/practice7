using System;
using System.Collections;
using System.Collections.Generic;

public class BinaryTreeNode<T>
{
    public T Value { get; set; }
    public BinaryTreeNode<T> Left { get; set; }
    public BinaryTreeNode<T> Right { get; set; }

    public BinaryTreeNode(T value)
    {
        Value = value;
        Left = null;
        Right = null;
    }
}

public class BinaryTree<T> : IEnumerable<T>
{
    private BinaryTreeNode<T> root;

    public BinaryTree(BinaryTreeNode<T> rootNode)
    {
        root = rootNode;
    }

    public IEnumerator<T> GetEnumerator()
    {
        return new InOrderIterator<T>(root);
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}

public class InOrderIterator<T> : IEnumerator<T>
{
    private BinaryTreeNode<T> current;
    private Stack<BinaryTreeNode<T>> stack;

    public InOrderIterator(BinaryTreeNode<T> root)
    {
        current = root;
        stack = new Stack<BinaryTreeNode<T>>();
    }

    public T Current
    {
        get { return current.Value; }
    }

    object IEnumerator.Current => Current;

    public bool MoveNext()
    {
        while (current != null || stack.Count > 0)
        {
            if (current != null)
            {
                stack.Push(current);
                current = current.Left;
            }
            else
            {
                current = stack.Pop();
                var node = current;
                current = current.Right;
                return true;
            }
        }
        return false;
    }

    public void Reset()
    {
        throw new NotImplementedException();
    }

    public void Dispose()
    {
    }
}

class Program
{
    static void Main()
    {
        var root = new BinaryTreeNode<int>(1);
        root.Left = new BinaryTreeNode<int>(2);
        root.Right = new BinaryTreeNode<int>(3);
        root.Left.Left = new BinaryTreeNode<int>(4);
        root.Left.Right = new BinaryTreeNode<int>(5);

        var tree = new BinaryTree<int>(root);

        foreach (var node in tree)
        {
            Console.WriteLine(node);
        }
    }
}
